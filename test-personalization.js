#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Personalization Engine
 * –ó–∞–ø—É—Å–∫: node test-personalization.js
 */

const { abTesting } = require("./src/analytics/abTesting");
const { recommendationEngine } = require("./src/ml/recommendationEngine");
const { enhancedAnalytics } = require("./src/analytics/enhancedAnalytics");

async function testPersonalizationEngine() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Personalization Engine...\n");

  const testUserId = "test-user-" + Date.now();
  const testTopicId = "test-topic-" + Date.now();

  try {
    // 1. –¢–µ—Å—Ç A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...");
    const testId = await abTesting.createTest({
      name: "–¢–µ—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏",
      description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏",
      status: "active",
      startDate: Date.now(),
      variants: [
        {
          id: "control",
          name: "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞",
          description: "–û–±—ã—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º",
          config: { algorithm: "basic" },
          trafficPercentage: 50,
        },
        {
          id: "experimental",
          name: "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞",
          description: "–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º",
          config: { algorithm: "advanced" },
          trafficPercentage: 50,
        },
      ],
      metrics: [
        {
          name: "engagement",
          type: "engagement",
          goal: "maximize",
          weight: 1.0,
        },
      ],
      targetAudience: {
        userSegments: ["all"],
        conditions: [],
      },
      trafficAllocation: 100,
    });
    console.log("‚úÖ A/B —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω:", testId);

    const variant = await abTesting.getVariant(testId, testUserId);
    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç:", variant?.name);

    await abTesting.recordResult(testId, variant.id, testUserId, {
      conversion: 1,
      engagement: 0.8,
    });
    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω");

    // 2. –¢–µ—Å—Ç ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    console.log("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...");
    await recommendationEngine.updateUserFeatures(testUserId, {
      preferredTopics: ["mathematics", "physics"],
      averageScore: 85,
      studyFrequency: 2.5,
    });
    console.log("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã");

    await recommendationEngine.updateTopicFeatures(testTopicId, {
      difficulty: 0.7,
      popularity: 0.8,
      tags: ["mathematics"],
    });
    console.log("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã");

    const recommendations = await recommendationEngine.getRecommendations(
      testUserId,
      5
    );
    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", recommendations.length, "—à—Ç—É–∫");
    if (recommendations.length > 0) {
      console.log(
        "   –ü–µ—Ä–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:",
        recommendations[0].topicId,
        "-",
        (recommendations[0].score * 100).toFixed(0) + "%"
      );
    }

    // 3. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    console.log("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...");
    const behaviorProfile = await enhancedAnalytics.analyzeUserBehavior(
      testUserId
    );
    console.log("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω");
    console.log(
      "   –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:",
      behaviorProfile.engagementMetrics.engagementScore.toFixed(0) + "%"
    );
    console.log(
      "   –ú–æ—Ç–∏–≤–∞—Ü–∏—è:",
      behaviorProfile.engagementMetrics.motivationLevel
    );

    const insights = await enhancedAnalytics.generatePredictiveInsights(
      testUserId
    );
    console.log("‚úÖ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");
    console.log("   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:", insights.predictions.length);

    const cohorts = await enhancedAnalytics.analyzeCohorts();
    console.log("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–≥–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω");
    console.log("   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–≥–æ—Ä—Ç:", cohorts.length);

    // 4. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
    console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    console.log("   - A/B —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç");
    console.log("   - ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è");
    console.log("   - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç");
    console.log("   - –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç");
    console.log("   - –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω");

    console.log("\n‚úÖ Personalization Engine –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testPersonalizationEngine().catch(console.error);


