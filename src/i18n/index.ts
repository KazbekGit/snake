// Types
type Dict = Record<string, string | Record<string, any>>;

// Russian translations
const ru: Dict = {
  // Common
  back: "–ù–∞–∑–∞–¥",
  continue: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
  start: "–ù–∞—á–∞—Ç—å",
  cancel: "–û—Ç–º–µ–Ω–∞",
  save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
  delete: "–£–¥–∞–ª–∏—Ç—å",
  edit: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
  close: "–ó–∞–∫—Ä—ã—Ç—å",
  loading: "–ó–∞–≥—Ä—É–∑–∫–∞...",
  error: "–û—à–∏–±–∫–∞",
  success: "–£—Å–ø–µ—à–Ω–æ",
  
  // Navigation
  home: "–ì–ª–∞–≤–Ω–∞—è",
  topics: "–¢–µ–º—ã",
  statistics: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
  settings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
  
  // Welcome Screen
  appTitle: "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
  appSubtitle: "–ò–∑—É—á–∞–π—Ç–µ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
  startButton: "–ù–∞—á–∞—Ç—å",
  features: {
    checkmark: "‚úÖ",
    books: "üìö", 
    stats: "üìä"
  },
  
  // Grade Selection
  selectGrade: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å",
  grade9: "9 –∫–ª–∞—Å—Å",
  grade10: "10 –∫–ª–∞—Å—Å",
  grade11: "11 –∫–ª–∞—Å—Å",
  
  // Goal Selection
  selectGoal: "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å",
  oge: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–ì–≠",
  ege: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠",
  general: "–û–±—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
  
  // Home Screen
  continueLearning: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
  sections: "–†–∞–∑–¥–µ–ª—ã –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è",
  sectionsList: {
    personSociety: "–ß–µ–ª–æ–≤–µ–∫ –∏ –æ–±—â–µ—Å—Ç–≤–æ",
    economy: "–≠–∫–æ–Ω–æ–º–∏–∫–∞", 
    socialRelations: "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
    politics: "–ü–æ–ª–∏—Ç–∏–∫–∞",
    law: "–ü—Ä–∞–≤–æ",
    culture: "–î—É—Ö–æ–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞"
  },
  actions: {
    continue: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
    repeat: "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
    start: "–ù–∞—á–∞—Ç—å"
  },
  icons: {
    person: "üë§",
    money: "üí∞",
    group: "üë•",
    government: "üèõÔ∏è",
    justice: "‚öñÔ∏è",
    culture: "üé®"
  },
  
  // Topic Screen
  startLearning: "–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ",
  resetProgress: "–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
  topicProgress: "–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–º—ã",
  blocksCompleted: "–ë–ª–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
  
  // Content Blocks
  nextBlock: "–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫",
  previousBlock: "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫",
  blockProgress: "–ë–ª–æ–∫ {current} –∏–∑ {total}",
  
  // Test Screen
  testTitle: "–ü—Ä–æ–≤–µ—Ä—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ",
  questionNumber: "–í–æ–ø—Ä–æ—Å {current} –∏–∑ {total}",
  correctAnswer: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!",
  wrongAnswer: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!",
  explanation: "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ",
  continueTest: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
  finishTest: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç",
  
  // Test Results
  resultsTitle: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞",
  correctAnswers: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
  totalQuestions: "–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤",
  percentage: "–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö",
  retakeTest: "–ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
  
  // Statistics Screen
  statisticsTitle: "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
  completedTopics: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–µ–º",
  studyTime: "–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è",
  averageScore: "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª",
  lastActivity: "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
  
  // Statistics Actions
  exportBackup: "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
  resetTopicProgress: "–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–º—É ¬´{topic}¬ª",
  resetAllProgress: "–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º",
  clearData: "–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
  
  // Event Log
  eventLog: "–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π",
  clearEventLog: "–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π",
  noEvents: "–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç",
  
  // Content Topics
  contentTopics: {
    money: {
      title: "–î–µ–Ω—å–≥–∏",
      description: "–ò–∑—É—á–∞–µ–º –ø—Ä–∏—Ä–æ–¥—É –¥–µ–Ω–µ–≥",
      blocks: {
        definition: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        functions: "–§—É–Ω–∫—Ü–∏–∏",
        types: "–í–∏–¥—ã",
        summary: "–ò—Ç–æ–≥–∏"
      }
    },
    market: {
      title: "–†—ã–Ω–æ–∫", 
      description: "–ò–∑—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É",
      blocks: {
        definition: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä—ã–Ω–æ–∫?",
        supplyDemand: "–°–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        structures: "–¢–∏–ø—ã —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä",
        competition: "–†–æ–ª—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏"
      }
    },
    humanNature: {
      title: "–ü—Ä–∏—Ä–æ–¥–∞ —á–µ–ª–æ–≤–µ–∫–∞",
      description: "–ò–∑—É—á–∞–µ–º –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏—Ä–æ–¥—É —á–µ–ª–æ–≤–µ–∫–∞",
      blocks: {
        biological: "–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞ —á–µ–ª–æ–≤–µ–∫–∞",
        social: "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏—Ä–æ–¥–∞ —á–µ–ª–æ–≤–µ–∫–∞", 
        needs: "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞",
        activity: "–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞"
      }
    }
  },
  
  // Quiz Questions
  quiz: {
    money: {
      question1: "–î–µ–Ω—å–≥–∏ ‚Äî —ç—Ç–æ?",
      options1: {
        equivalent: "–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç",
        product: "–¢–æ–≤–∞—Ä",
        service: "–£—Å–ª—É–≥–∞",
        resource: "–†–µ—Å—É—Ä—Å"
      },
      explanation1: "–î–µ–Ω—å–≥–∏ ‚Äî —ç—Ç–æ –≤—Å–µ–æ–±—â–∏–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥."
    }
  },
  
  // Errors
  errors: {
    networkError: "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏",
    loadingError: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
    saveError: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
    unknownError: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
  },
  
  // Success Messages
  successMessages: {
    progressSaved: "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
    backupExported: "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞",
    progressReset: "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω"
  }
};

// English translations
const en: Dict = {
  // Common
  back: "Back",
  continue: "Continue", 
  start: "Start",
  cancel: "Cancel",
  save: "Save",
  delete: "Delete",
  edit: "Edit",
  close: "Close",
  loading: "Loading...",
  error: "Error",
  success: "Success",
  
  // Navigation
  home: "Home",
  topics: "Topics",
  statistics: "Statistics", 
  settings: "Settings",
  
  // Welcome Screen
  appTitle: "Social Studies",
  appSubtitle: "Learn social studies",
  startButton: "Start",
  features: {
    checkmark: "‚úÖ",
    books: "üìö",
    stats: "üìä"
  },
  
  // Grade Selection
  selectGrade: "Select grade",
  grade9: "Grade 9",
  grade10: "Grade 10", 
  grade11: "Grade 11",
  
  // Goal Selection
  selectGoal: "Select goal",
  oge: "OGE preparation",
  ege: "EGE preparation",
  general: "General development",
  
  // Home Screen
  continueLearning: "Continue learning",
  sections: "Social studies sections",
  sectionsList: {
    personSociety: "Person and Society",
    economy: "Economy",
    socialRelations: "Social Relations", 
    politics: "Politics",
    law: "Law",
    culture: "Spiritual Culture"
  },
  actions: {
    continue: "Continue",
    repeat: "Review",
    start: "Start"
  },
  icons: {
    person: "üë§",
    money: "üí∞", 
    group: "üë•",
    government: "üèõÔ∏è",
    justice: "‚öñÔ∏è",
    culture: "üé®"
  },
  
  // Topic Screen
  startLearning: "Start learning",
  resetProgress: "Reset progress",
  topicProgress: "Topic progress",
  blocksCompleted: "Blocks completed",
  
  // Content Blocks
  nextBlock: "Next block",
  previousBlock: "Previous block", 
  blockProgress: "Block {current} of {total}",
  
  // Test Screen
  testTitle: "Check understanding",
  questionNumber: "Question {current} of {total}",
  correctAnswer: "Correct!",
  wrongAnswer: "Incorrect!",
  explanation: "Explanation",
  continueTest: "Continue",
  finishTest: "Finish test",
  
  // Test Results
  resultsTitle: "Test results",
  correctAnswers: "Correct answers",
  totalQuestions: "Total questions",
  percentage: "Percentage correct",
  retakeTest: "Retake test",
  
  // Statistics Screen
  statisticsTitle: "General statistics",
  completedTopics: "Completed topics",
  studyTime: "Study time",
  averageScore: "Average score",
  lastActivity: "Last activity",
  
  // Statistics Actions
  exportBackup: "Export backup",
  resetTopicProgress: "Reset topic ¬´{topic}¬ª",
  resetAllProgress: "Reset all topics progress",
  clearData: "Clear data",
  
  // Event Log
  eventLog: "Event log",
  clearEventLog: "Clear event log",
  noEvents: "No events yet",
  
  // Content Topics
  contentTopics: {
    money: {
      title: "Money",
      description: "Learn about the nature of money",
      blocks: {
        definition: "Definition",
        functions: "Functions", 
        types: "Types",
        summary: "Summary"
      }
    },
    market: {
      title: "Market",
      description: "Learn about market economy",
      blocks: {
        definition: "What is a market?",
        supplyDemand: "Supply and demand",
        structures: "Market structures",
        competition: "Role of competition"
      }
    },
    humanNature: {
      title: "Human Nature", 
      description: "Learn about biological and social nature of humans",
      blocks: {
        biological: "Biological nature of humans",
        social: "Social nature of humans",
        needs: "Human needs",
        activity: "Human activity"
      }
    }
  },
  
  // Quiz Questions
  quiz: {
    money: {
      question1: "Money is?",
      options1: {
        equivalent: "Equivalent",
        product: "Product",
        service: "Service", 
        resource: "Resource"
      },
      explanation1: "Money is a universal equivalent of the value of goods and services."
    }
  },
  
  // Errors
  errors: {
    networkError: "Network error",
    loadingError: "Loading error",
    saveError: "Save error",
    unknownError: "Unknown error"
  },
  
  // Success Messages
  successMessages: {
    progressSaved: "Progress saved",
    backupExported: "Backup exported",
    progressReset: "Progress reset"
  }
};

// Current locale
let currentLocale: "ru" | "en" = "ru";
let currentDict: Dict = ru;

// Set locale
export function setLocale(locale: "ru" | "en") {
  currentLocale = locale;
  currentDict = locale === "en" ? en : ru;
}

// Get current locale
export function getLocale(): "ru" | "en" {
  return currentLocale;
}

// Translation function with nested key support
export function t(key: string, params?: Record<string, string | number>): string {
  const keys = key.split('.');
  let value: any = currentDict;
  
  for (const k of keys) {
    if (value && typeof value === 'object' && k in value) {
      value = value[k];
    } else {
      // Fallback to key if translation not found
      return key;
    }
  }
  
  if (typeof value !== 'string') {
    return key;
  }
  
  // Replace parameters
  if (params) {
    return value.replace(/\{(\w+)\}/g, (match, param) => {
      return String(params[param] || match);
    });
  }
  
  return value;
}

// Get nested object
export function tn(key: string): Record<string, string> {
  const keys = key.split('.');
  let value: any = currentDict;
  
  for (const k of keys) {
    if (value && typeof value === 'object' && k in value) {
      value = value[k];
    } else {
      return {};
    }
  }
  
  return typeof value === 'object' ? value : {};
}

// Export dictionaries for testing
export { ru, en };
