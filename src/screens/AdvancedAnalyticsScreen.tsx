import React, { useState } from 'react';
import { View, StyleSheet, ScrollView, TouchableOpacity, Text, Alert } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useAdvancedAnalytics } from '../hooks/useAdvancedAnalytics';
import { useI18n } from '../hooks/useI18n';
import { ds } from '../ui/theme';
import { Typography } from '../ui/Typography';
import { TopNav } from '../ui/TopNav';
import { Container, Row, Col } from '../ui/Grid';
import { RecommendationCard } from '../ui/RecommendationCard';
import { AdvancedStatsCard } from '../ui/AdvancedStatsCard';
import { Button } from '../ui/Button';
import { ChartIcon } from '../ui/icons/ChartIcon';
import { LightbulbIcon } from '../ui/icons/LightbulbIcon';
import { SettingsIcon } from '../ui/icons/SettingsIcon';

export const AdvancedAnalyticsScreen: React.FC = () => {
  const { t } = useI18n();
  const {
    isLoading,
    getProfile,
    getRecommendations,
    getHighPriorityRecommendations,
    getMediumPriorityRecommendations,
    formatStudyTime,
    formatScore,
    getStreakEmoji,
    getScoreColor,
    clearAllData,
    loadAnalyticsData
  } = useAdvancedAnalytics();

  const [activeTab, setActiveTab] = useState<'stats' | 'recommendations'>('stats');

  const profile = getProfile();
  const recommendations = getRecommendations();
  const highPriorityRecs = getHighPriorityRecommendations();
  const mediumPriorityRecs = getMediumPriorityRecommendations();

  const handleClearData = () => {
    Alert.alert(
      '–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–£–¥–∞–ª–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            try {
              await clearAllData();
              Alert.alert('–£—Å–ø–µ—à–Ω–æ', '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã');
            } catch (error) {
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
            }
          }
        }
      ]
    );
  };

  const handleRecommendationPress = (recommendation: any) => {
    // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–µ–º–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—é
    Alert.alert(
      recommendation.title,
      recommendation.description,
      [{ text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' }]
    );
  };

  if (isLoading) {
    return (
      <SafeAreaView style={styles.container}>
        <TopNav />
        <Container>
          <View style={styles.loadingContainer}>
            <Typography variant="title">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...</Typography>
          </View>
        </Container>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <TopNav />
      <Container>
        <Row>
          <Col spanDesktop={12} spanTablet={12} spanMobile={12}>
            <View style={styles.header}>
              <View style={styles.titleContainer}>
                <ChartIcon size={32} color={ds.colors.primary} />
                <Typography variant="heroTitle" style={styles.title}>
                  –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                </Typography>
              </View>
              
              <TouchableOpacity onPress={handleClearData} style={styles.settingsButton}>
                <SettingsIcon size={24} color={ds.colors.textSecondary} />
              </TouchableOpacity>
            </View>

            {/* –¢–∞–±—ã */}
            <View style={styles.tabsContainer}>
              <TouchableOpacity
                style={[styles.tab, activeTab === 'stats' && styles.activeTab]}
                onPress={() => setActiveTab('stats')}
              >
                <ChartIcon size={20} color={activeTab === 'stats' ? ds.colors.primary : ds.colors.textSecondary} />
                <Typography 
                  variant="subtitle" 
                  style={[styles.tabText, activeTab === 'stats' && styles.activeTabText]}
                >
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </Typography>
              </TouchableOpacity>

              <TouchableOpacity
                style={[styles.tab, activeTab === 'recommendations' && styles.activeTab]}
                onPress={() => setActiveTab('recommendations')}
              >
                <LightbulbIcon size={20} color={activeTab === 'recommendations' ? ds.colors.primary : ds.colors.textSecondary} />
                <Typography 
                  variant="subtitle" 
                  style={[styles.tabText, activeTab === 'recommendations' && styles.activeTabText]}
                >
                  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({recommendations.length})
                </Typography>
              </TouchableOpacity>
            </View>

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
            <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
              {activeTab === 'stats' ? (
                // –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                <View>
                  {profile ? (
                    <AdvancedStatsCard
                      profile={profile}
                      formatStudyTime={formatStudyTime}
                      formatScore={formatScore}
                      getStreakEmoji={getStreakEmoji}
                      getScoreColor={getScoreColor}
                    />
                  ) : (
                    <View style={styles.emptyState}>
                      <Typography variant="title" style={styles.emptyTitle}>
                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                      </Typography>
                      <Typography style={styles.emptyDescription}>
                        –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–º, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                      </Typography>
                      <Button
                        label="–û–±–Ω–æ–≤–∏—Ç—å"
                        onPress={loadAnalyticsData}
                        variant="primary"
                        style={styles.refreshButton}
                      />
                    </View>
                  )}
                </View>
              ) : (
                // –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                <View>
                  {recommendations.length > 0 ? (
                    <View>
                      {/* –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
                      {highPriorityRecs.length > 0 && (
                        <View style={styles.section}>
                          <Typography variant="title" style={styles.sectionTitle}>
                            üî• –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                          </Typography>
                          {highPriorityRecs.map((recommendation, index) => (
                            <RecommendationCard
                              key={index}
                              recommendation={recommendation}
                              onPress={() => handleRecommendationPress(recommendation)}
                            />
                          ))}
                        </View>
                      )}

                      {/* –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
                      {mediumPriorityRecs.length > 0 && (
                        <View style={styles.section}>
                          <Typography variant="title" style={styles.sectionTitle}>
                            ‚ö° –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                          </Typography>
                          {mediumPriorityRecs.map((recommendation, index) => (
                            <RecommendationCard
                              key={index}
                              recommendation={recommendation}
                              onPress={() => handleRecommendationPress(recommendation)}
                            />
                          ))}
                        </View>
                      )}

                      {/* –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
                      {recommendations.filter(r => r.priority === 'low').length > 0 && (
                        <View style={styles.section}>
                          <Typography variant="title" style={styles.sectionTitle}>
                            ‚ú® –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                          </Typography>
                          {recommendations
                            .filter(r => r.priority === 'low')
                            .map((recommendation, index) => (
                              <RecommendationCard
                                key={index}
                                recommendation={recommendation}
                                onPress={() => handleRecommendationPress(recommendation)}
                              />
                            ))}
                        </View>
                      )}
                    </View>
                  ) : (
                    <View style={styles.emptyState}>
                      <Typography variant="title" style={styles.emptyTitle}>
                        –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                      </Typography>
                      <Typography style={styles.emptyDescription}>
                        –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                      </Typography>
                      <Button
                        label="–û–±–Ω–æ–≤–∏—Ç—å"
                        onPress={loadAnalyticsData}
                        variant="primary"
                        style={styles.refreshButton}
                      />
                    </View>
                  )}
                </View>
              )}
            </ScrollView>
          </Col>
        </Row>
      </Container>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: ds.colors.background,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: ds.spacing.lg,
  },
  titleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  title: {
    marginLeft: ds.spacing.sm,
    color: ds.colors.text,
  },
  settingsButton: {
    padding: ds.spacing.sm,
  },
  tabsContainer: {
    flexDirection: 'row',
    backgroundColor: ds.colors.card,
    borderRadius: ds.radius.lg,
    padding: ds.spacing.xs,
    marginBottom: ds.spacing.lg,
  },
  tab: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: ds.spacing.sm,
    paddingHorizontal: ds.spacing.md,
    borderRadius: ds.radius.md,
  },
  activeTab: {
    backgroundColor: ds.colors.background,
  },
  tabText: {
    marginLeft: ds.spacing.xs,
    color: ds.colors.textSecondary,
  },
  activeTabText: {
    color: ds.colors.primary,
    fontWeight: '600',
  },
  content: {
    flex: 1,
  },
  section: {
    marginBottom: ds.spacing.xl,
  },
  sectionTitle: {
    color: ds.colors.text,
    marginBottom: ds.spacing.md,
    fontWeight: '600',
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: ds.spacing.xl * 2,
  },
  emptyTitle: {
    color: ds.colors.text,
    marginBottom: ds.spacing.md,
    textAlign: 'center',
  },
  emptyDescription: {
    color: ds.colors.textSecondary,
    textAlign: 'center',
    marginBottom: ds.spacing.lg,
    paddingHorizontal: ds.spacing.lg,
  },
  refreshButton: {
    minWidth: 120,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
