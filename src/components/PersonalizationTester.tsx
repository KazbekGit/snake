import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Alert,
} from "react-native";
import { useEnhancedPersonalization } from "../hooks/useEnhancedPersonalization";
import { Typography } from "../ui/Typography";
import { Card } from "../ui/Card";
import { Button } from "../ui/Button";
import { colors } from "../constants/colors";
import { ds } from "../ui/theme";

export const PersonalizationTester: React.FC = () => {
  const [testResults, setTestResults] = useState<string[]>([]);
  const [isRunning, setIsRunning] = useState(false);

  const [state, actions] = useEnhancedPersonalization(
    "test-user-" + Date.now(),
    {
      autoRefresh: false,
      enableABTesting: true,
      enableML: true,
      enableAnalytics: true,
      demoFill: true,
    }
  );

  const addResult = (message: string) => {
    setTestResults((prev) => [
      ...prev,
      `${new Date().toLocaleTimeString()}: ${message}`,
    ]);
  };

  const clearResults = () => {
    setTestResults([]);
  };

  const runFullTest = async () => {
    setIsRunning(true);
    clearResults();

    try {
      addResult("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Personalization Engine...");

      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      addResult("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...");
      if (state.isLoading) {
        addResult("   ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
        await new Promise((resolve) => setTimeout(resolve, 2000));
      }
      addResult("   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      addResult("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...");
      if (state.activeTests.length > 0) {
        addResult(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${state.activeTests.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤`);
        state.activeTests.forEach((test) => {
          addResult(`   üìã –¢–µ—Å—Ç: ${test.name}`);
        });
      } else {
        addResult("   ‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö A/B —Ç–µ—Å—Ç–æ–≤");
      }

      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      addResult("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...");
      if (state.recommendations.length > 0) {
        addResult(
          `   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${state.recommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`
        );
        state.recommendations.slice(0, 3).forEach((rec, index) => {
          addResult(
            `   üìö ${index + 1}. ${rec.topicId} (${(rec.score * 100).toFixed(
              0
            )}%)`
          );
        });
      } else {
        addResult("   ‚è≥ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...");
        await new Promise((resolve) => setTimeout(resolve, 1000));
        addResult("   ‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º");
      }

      // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      addResult("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...");
      if (state.behaviorProfile) {
        addResult("   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω");
        addResult(
          `   üìä –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: ${state.behaviorProfile.engagementMetrics.engagementScore.toFixed(
            0
          )}%`
        );
        addResult(
          `   üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${state.behaviorProfile.engagementMetrics.motivationLevel}`
        );
      } else {
        addResult("   ‚è≥ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");
        await new Promise((resolve) => setTimeout(resolve, 1000));
        addResult(
          "   ‚ÑπÔ∏è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"
        );
      }

      // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
      addResult("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤...");
      if (state.predictiveInsights) {
        addResult("   ‚úÖ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");
        addResult(
          `   üîÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: ${state.predictiveInsights.predictions.length}`
        );
        state.predictiveInsights.predictions.forEach((pred, index) => {
          addResult(
            `   üìà ${index + 1}. ${pred.type}: ${(pred.value * 100).toFixed(
              0
            )}%`
          );
        });
      } else {
        addResult("   ‚è≥ –ò–Ω—Å–∞–π—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...");
        await new Promise((resolve) => setTimeout(resolve, 1000));
        addResult("   ‚ÑπÔ∏è –ò–Ω—Å–∞–π—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
      }

      // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–≥–æ—Ä—Ç
      addResult("6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–≥–æ—Ä—Ç...");
      if (state.cohortAnalyses.length > 0) {
        addResult(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${state.cohortAnalyses.length} –∫–æ–≥–æ—Ä—Ç`);
        state.cohortAnalyses.forEach((cohort) => {
          addResult(
            `   üë• –ö–æ–≥–æ—Ä—Ç–∞: ${cohort.cohortId} (${cohort.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`
          );
        });
      } else {
        addResult("   ‚ÑπÔ∏è –ö–æ–≥–æ—Ä—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö");
      }

      // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
      addResult("7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...");
      if (state.error) {
        addResult(`   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: ${state.error}`);
      } else {
        addResult("   ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
      }

      addResult("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
      addResult("‚úÖ Personalization Engine —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    } catch (error) {
      addResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
    } finally {
      setIsRunning(false);
    }
  };

  const testUserFeatures = async () => {
    try {
      addResult("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
      await actions.updateUserFeatures({
        preferredTopics: ["mathematics", "physics"],
        averageScore: 85,
        studyFrequency: 2.5,
      });
      addResult("   ‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
    } catch (error) {
      addResult(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  const testStudySession = async () => {
    try {
      addResult("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è...");
      await actions.startStudySession({
        topicId: "test-topic",
        availableTime: 30,
        difficultyPreference: 0.7,
        section: "mathematics",
      });
      addResult("   ‚úÖ –°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞");

      await new Promise((resolve) => setTimeout(resolve, 1000));

      await actions.endStudySession({
        duration: 1800000, // 30 –º–∏–Ω—É—Ç
        completionRate: 0.8,
        engagementScore: 0.9,
        satisfactionScore: 0.85,
        score: 85,
      });
      addResult("   ‚úÖ –°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    } catch (error) {
      addResult(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  const testInteraction = async () => {
    try {
      addResult("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π...");
      await actions.recordInteraction({
        type: "content_view",
        topicId: "test-topic",
        value: 1,
        timestamp: Date.now(),
      });
      addResult("   ‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ");
    } catch (error) {
      addResult(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  const refreshData = async () => {
    try {
      addResult("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...");
      await actions.refreshAll();
      addResult("   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
    } catch (error) {
      addResult(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Card style={styles.headerCard}>
        <Typography variant="h5" style={styles.title}>
          üß™ Personalization Engine Tester
        </Typography>
        <Typography variant="body2" style={styles.subtitle}>
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        </Typography>
      </Card>

      <Card style={styles.controlsCard}>
        <Typography variant="h6" style={styles.sectionTitle}>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏
        </Typography>

        <View style={styles.buttonRow}>
          <Button
            title="–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç"
            onPress={runFullTest}
            disabled={isRunning}
            style={styles.button}
          />
          <Button
            title="–û—á–∏—Å—Ç–∏—Ç—å"
            onPress={clearResults}
            variant="secondary"
            style={styles.button}
          />
        </View>

        <View style={styles.buttonRow}>
          <Button
            title="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏"
            onPress={testUserFeatures}
            variant="outline"
            size="small"
            style={styles.button}
          />
          <Button
            title="–¢–µ—Å—Ç —Å–µ—Å—Å–∏–∏"
            onPress={testStudySession}
            variant="outline"
            size="small"
            style={styles.button}
          />
        </View>

        <View style={styles.buttonRow}>
          <Button
            title="–ó–∞–ø–∏—Å–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ"
            onPress={testInteraction}
            variant="outline"
            size="small"
            style={styles.button}
          />
          <Button
            title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
            onPress={refreshData}
            variant="outline"
            size="small"
            style={styles.button}
          />
        </View>
      </Card>

      <Card style={styles.statusCard}>
        <Typography variant="h6" style={styles.sectionTitle}>
          –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        </Typography>

        <View style={styles.statusItem}>
          <Text style={styles.statusLabel}>–ó–∞–≥—Ä—É–∑–∫–∞:</Text>
          <Text
            style={[
              styles.statusValue,
              state.isLoading ? styles.loading : styles.ready,
            ]}
          >
            {state.isLoading ? "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..." : "‚úÖ –ì–æ—Ç–æ–≤–æ"}
          </Text>
        </View>

        <View style={styles.statusItem}>
          <Text style={styles.statusLabel}>A/B —Ç–µ—Å—Ç—ã:</Text>
          <Text style={styles.statusValue}>
            {state.activeTests.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö
          </Text>
        </View>

        <View style={styles.statusItem}>
          <Text style={styles.statusLabel}>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</Text>
          <Text style={styles.statusValue}>
            {state.recommendations.length} –¥–æ—Å—Ç—É–ø–Ω–æ
          </Text>
        </View>

        <View style={styles.statusItem}>
          <Text style={styles.statusLabel}>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</Text>
          <Text style={styles.statusValue}>
            {state.behaviorProfile ? "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" : "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"}
          </Text>
        </View>

        <View style={styles.statusItem}>
          <Text style={styles.statusLabel}>–ò–Ω—Å–∞–π—Ç—ã:</Text>
          <Text style={styles.statusValue}>
            {state.predictiveInsights ? "‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã" : "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è"}
          </Text>
        </View>

        {state.error && (
          <View style={styles.errorItem}>
            <Text style={styles.errorLabel}>–û—à–∏–±–∫–∞:</Text>
            <Text style={styles.errorText}>{state.error}</Text>
          </View>
        )}
      </Card>

      <Card style={styles.resultsCard}>
        <Typography variant="h6" style={styles.sectionTitle}>
          –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        </Typography>

        {testResults.length === 0 ? (
          <Typography variant="body2" style={styles.emptyText}>
            –ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </Typography>
        ) : (
          <ScrollView style={styles.resultsContainer}>
            {testResults.map((result, index) => (
              <Text key={index} style={styles.resultText}>
                {result}
              </Text>
            ))}
          </ScrollView>
        )}
      </Card>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: ds.spacing.md,
  },
  headerCard: {
    marginBottom: ds.spacing.md,
  },
  title: {
    marginBottom: ds.spacing.xs,
  },
  subtitle: {
    color: colors.textSecondary,
  },
  controlsCard: {
    marginBottom: ds.spacing.md,
  },
  sectionTitle: {
    marginBottom: ds.spacing.md,
  },
  buttonRow: {
    flexDirection: "row",
    gap: 8, // ds.spacing.sm
    marginBottom: 8, // ds.spacing.sm
  },
  button: {
    flex: 1,
  },
  statusCard: {
    marginBottom: ds.spacing.md,
  },
  statusItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: ds.spacing.xs,
  },
  statusLabel: {
    fontSize: 14,
    color: colors.textSecondary,
  },
  statusValue: {
    fontSize: 14,
    fontWeight: "500",
  },
  loading: {
    color: colors.warning,
  },
  ready: {
    color: colors.success,
  },
  errorItem: {
    marginTop: 8, // ds.spacing.sm
    padding: 8, // ds.spacing.sm
    backgroundColor: "#ffebee",
    borderRadius: 8, // ds.radius.sm
  },
  errorLabel: {
    fontSize: 14,
    fontWeight: "600",
    color: colors.error,
    marginBottom: ds.spacing.xs,
  },
  errorText: {
    fontSize: 12,
    color: colors.error,
  },
  resultsCard: {
    marginBottom: ds.spacing.md,
  },
  emptyText: {
    textAlign: "center",
    fontStyle: "italic",
    color: colors.textSecondary,
  },
  resultsContainer: {
    maxHeight: 300,
  },
  resultText: {
    fontSize: 12,
    marginBottom: ds.spacing.xs,
    fontFamily: "monospace",
  },
});
